name: CI/CD üöÄ

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
      - dev
      - production
  pull_request:
    branches:
      - main
      - dev
      - production
    types: [ opened, reopened, edited, synchronize ]

jobs:
  define-environment:
    name: Set ‚ú® environment ‚ú® based on the branch üå≥
    runs-on: ubuntu-latest
    steps:
      - name: Set the environment
        id: define_environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "env_name=development" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
          fi
      - name: Print the environment
        run: echo "The environment is ${{ steps.define_environment.outputs.env_name }}"

    outputs:
      env_name: ${{ steps.define_environment.outputs.env_name }}

  deploy-veda-auth:
    name: Deploy VEDA auth üîê
    runs-on: ubuntu-latest
    env:
      DIRECTORY: veda-auth-stack
    needs: define-environment
    environment: ${{ needs.define-environment.outputs.env_name }}
    concurrency: ${{ needs.define-environment.outputs.env_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: "true"
          submodules: "recursive"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ needs.define-environment.outputs.env_name }}-deployment"
          aws-region: "us-west-2"
      - name: Run auth deployment
        uses: "./veda-auth-stack/.github/actions/cdk-deploy"
        with:
          dir: "${{ env.DIRECTORY }}"
          env_aws_secret_name: ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }}
          script_path: "${{ github.workspace }}/scripts/generate_env_file.py"

  deploy-veda-backend:
    name: Deploy VEDA backend ‚öôÔ∏è
    runs-on: ubuntu-latest
    env:
      DIRECTORY: veda-backend-stack
    needs: define-environment
    environment: ${{ needs.define-environment.outputs.env_name }}
    concurrency: ${{ needs.define-environment.outputs.env_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: "true"
          submodules: "recursive"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ needs.define-environment.outputs.env_name }}-deployment"
          aws-region: "us-west-2"

      - name: Run deployment
        uses: "./veda-backend-stack/.github/actions/cdk-deploy"
        with:
          env_aws_secret_name: ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }}
          dir: "${{ env.DIRECTORY }}"
  deploy-veda-stac-ingestor-sans-airflow-integration:
    name: deploy VEDA stac ingestor üçΩÔ∏è (without airflow integration)
    runs-on: ubuntu-latest
    env:
      DIRECTORY: veda-ingest-stack
      AWS_REGION: "us-west-2"
    needs: [deploy-veda-backend, deploy-veda-auth, define-environment]
    environment: ${{ needs.define-environment.outputs.env_name }}
    concurrency: ${{ needs.define-environment.outputs.env_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: "true"
          submodules: "recursive"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ needs.define-environment.outputs.env_name }}-deployment"
          aws-region: "${{ env.AWS_REGION }}"

      - name: Run deployment
        uses: "./veda-ingest-stack/.github/actions/cdk-deploy"
        with:
          env_aws_secret_name: ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }}
          dir: "${{ env.DIRECTORY }}"
          script_path: "${{ github.workspace }}/scripts/generate_env_file.py"
          backend_stack_name: "ghgc-backend-development"
