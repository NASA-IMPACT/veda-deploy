name: CI/CD 🚀

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        description: Environment to deploy to

run-name: Deploy to ${{ inputs.environment }} environment by @${{ github.actor }}

jobs:
  deploy-veda-auth:
    name: Deploy VEDA auth 🔐
    runs-on: ubuntu-latest
    env:
      DIRECTORY: veda-auth
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: "true"
          submodules: "recursive"

      - name: Checkout to the provided Git Ref
        run: |
          cd ${{ env.DIRECTORY }}
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --tags origin
          git checkout ${{ vars.VEDA_AUTH_GIT_REF || 'main'}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ env.ENVIRONMENT }}-auth-deployment"
          aws-region: "us-west-2"

      - name: Run auth deployment
        id: deploy_auth_stack
        uses: "./veda-auth/.github/actions/cdk-deploy"
        with:
          dir: "${{ env.DIRECTORY }}"
          env_aws_secret_name: ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }}

      - name: Get Auth Stack Name
        id: get_auth_stack
        shell: bash
        run: |
          stack=$(jq 'keys_unsorted[0]' ${HOME}/cdk-outputs.json)
          echo "auth_stackname=$stack" >> $GITHUB_OUTPUT

    outputs:
      auth_stack_name: ${{ steps.get_auth_stack.outputs.auth_stackname }}

  deploy-veda-backend:
    name: Deploy VEDA backend ⚙️
    runs-on: ubuntu-latest
    env:
      DIRECTORY: veda-backend
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    needs: [deploy-veda-auth]
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: "true"
          submodules: "recursive"

      - name: Checkout to the provided Git Ref
        run: |
          cd ${{ env.DIRECTORY }}
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --tags origin
          echo `git checkout ${{ vars.VEDA_BACKEND_GIT_REF || 'main' }}`
          git checkout ${{ vars.VEDA_BACKEND_GIT_REF || 'main' }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ env.ENVIRONMENT }}-backend-deployment"
          aws-region: "us-west-2"

      - name: Run deployment
        uses: "./veda-backend/.github/actions/cdk-deploy"
        id: deploy_backend_stack
        with:
          env_aws_secret_name: ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }}
          auth_stack_name: "${{ needs.deploy-veda-auth.outputs.auth_stack_name }}"
          dir: "${{ env.DIRECTORY }}"
          script_path: "${{ github.workspace }}/scripts/generate_env_file.py"

      - name: Get Backend Stack Name
        id: get_backend_stack
        shell: bash
        run: |
          stack=$(jq 'keys_unsorted[0]' ${HOME}/cdk-outputs.json)
          echo "backend_stackname=$stack" >> $GITHUB_OUTPUT

    outputs:
      backend_stack_name: ${{ steps.get_backend_stack.outputs.backend_stackname }}

  deploy-veda-data-airflow:
    name: deploy VEDA data airflow 🍃
    runs-on: ubuntu-latest
    env:
      DIRECTORY: veda-data-airflow
      AWS_REGION: "us-west-2"
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    needs: [deploy-veda-auth, deploy-veda-backend]
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: "true"
          submodules: "recursive"

      - name: Checkout to the provided Git Ref
        run: |
          cd ${{ env.DIRECTORY }}
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --tags origin
          echo `git checkout origin/${{ vars.VEDA_DATA_AIRFLOW_GIT_REF || 'main' }}`
          git checkout origin/${{ vars.VEDA_DATA_AIRFLOW_GIT_REF || 'main'}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ env.ENVIRONMENT }}-airflow-deployment"
          aws-region: "${{ env.AWS_REGION }}"
          
      - name: Run deployment
        uses: "./veda-data-airflow/.github/actions/terraform-deploy"
        with:
          env-file: ".env"
          env_aws_secret_name: ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }}
          dir: "${{ env.DIRECTORY }}"
          script_path: "${{ github.workspace }}/scripts/generate_env_file.py"
          backend_stack_name: "${{ needs.deploy-veda-backend.outputs.backend_stack_name }}"
          auth_stack_name: "${{ needs.deploy-veda-auth.outputs.auth_stack_name }}"

  test-deployment:
    name: Test Deployment 👨🏻‍🔬
    runs-on: ubuntu-latest
    needs: [ deploy-veda-backend ]
    env:
      DIRECTORY: integration_test
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      AWS_DEFAULT_REGION: us-west-2
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            ${{ github.workspace }}/${{ env.DIRECTORY }}/requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "${{ env.DIRECTORY }}-github-${{ env.ENVIRONMENT }}-integration-test"
          aws-region: "${{ env.AWS_DEFAULT_REGION }}"

      - name: Install python dependencies
        shell: bash
        working-directory: ${{ env.DIRECTORY }}
        run: |
          pip install -r requirements.txt
          python "${{ github.workspace }}/scripts/generate_env_file.py" --secret-id ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }} --stack-names "${{ needs.deploy-veda-backend.outputs.backend_stack_name }}"

      - name: Integration test
        shell: bash
        working-directory: ${{ env.DIRECTORY }}
        run: |
          pytest .

  run-playwright-checks:
    name: playwright end to end tests
    if: ${{ needs.define-environment.outputs.env_name }}
    runs-on: ubuntu-latest
    needs: [ deploy-veda-backend, deploy-veda-data-airflow]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: NASA-IMPACT/veda-config
          ref: add-playwright

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install
        run: yarn

      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps

      - name: Generate .env file from cdk.out
        shell: bash
        working-directory: ${{ env.DIRECTORY }}
        run: |
          pip install -r requirements.txt
          python "${{ github.workspace }}/scripts/generate_env_file.py" --secret-id ${{ vars.DEPLOYMENT_ENV_SECRET_NAME }} --stack-names "${{ needs.deploy-veda-backend.outputs.backend_stack_name }}"


      - name: Load .env file
        id: dotenv
        uses: falti/dotenv-action@v1.1

      - name: Create env.local file
        env:
          MAPBOX_TOKEN: ${{secrets.MAPBOX_TOKEN}}
        run: |
          touch .env.local
          echo "API_RASTER_ENDPOINT=${{steps.dotenv.outputs.VEDA_RASTER_URL}}" >> .env.local
          echo "API_STAC_ENDPOINT=${{steps.dotenv.outputs.VEDA_STAC_URL}}" >> .env.local

          echo "Testing deployment URLs"
          cat .env.local

          echo "MAPBOX_TOKEN="$MAPBOX_TOKEN" >> .env.local

      - name: Playwright tests
        run: yarn test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
